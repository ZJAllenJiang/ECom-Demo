# Database Configuration
DB_USERNAME=postgres
DB_PASSWORD=password
DB_HOST=localhost
DB_PORT=5432
DB_NAME=ecommerce

# Stripe Configuration
STRIPE_SECRET_KEY=sk_test_your_secret_key_here
STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key_here

# ActiveMQ Configuration
ACTIVEMQ_BROKER_URL=tcp://localhost:61616

# Elasticsearch Configuration
ELASTICSEARCH_HOST=localhost
ELASTICSEARCH_PORT=9200

# Application Configuration
SERVER_PORT=8080
JWT_SECRET=your_jwt_secret_key_here

### build.sh
```bash
#!/bin/bash

# Build backend
echo "Building backend..."
cd backend
mvn clean package -DskipTests
cd ..

# Build frontend
echo "Building frontend..."
cd frontend
npm install
npm run build
cd ..

# Build Docker images
echo "Building Docker images..."
docker-compose build

echo "Build completed successfully!"
```

### start-dev.sh
```bash
#!/bin/bash

# Start infrastructure services
echo "Starting infrastructure services..."
docker-compose up -d postgres activemq elasticsearch logstash kibana

# Wait for services to be ready
echo "Waiting for services to be ready..."
sleep 30

# Start backend in development mode
echo "Starting backend..."
cd backend
mvn spring-boot:run &
BACKEND_PID=$!

# Start frontend in development mode
echo "Starting frontend..."
cd ../frontend
npm start &
FRONTEND_PID=$!

# Wait for user input to stop
echo "Development environment started!"
echo "Frontend: http://localhost:3000"
echo "Backend: http://localhost:8080"
echo "Press Ctrl+C to stop all services"

# Handle cleanup on exit
trap 'kill $BACKEND_PID $FRONTEND_PID; docker-compose down' INT

wait
```

### deploy.sh
```bash
#!/bin/bash

# Production deployment script
echo "Deploying to production..."

# Build application
./build.sh

# Tag images for production
docker tag ecommerce-platform_backend:latest your-registry/ecommerce-backend:latest
docker tag ecommerce-platform_frontend:latest your-registry/ecommerce-frontend:latest

# Push to registry
docker push your-registry/ecommerce-backend:latest
docker push your-registry/ecommerce-frontend:latest

# Deploy using docker-compose
docker-compose -f docker-compose.prod.yml up -d

echo "Production deployment completed!"